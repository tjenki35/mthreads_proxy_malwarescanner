package proxy;

import java.util.regex.Matcher;

/**
 *
 * @author Torie Jenkins u1038290
 */
public class HttpRequest extends Message {

    public int content_length; // parse the content length
    public String url;
    public String method;

    private final String[] accepted_methods = {"GET"}; //{"OPTIONS", "GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "CONNECT"};
    //lets maybe not check all of these. just parse with regex 

    public HttpRequest() {
        super();
    }

    private boolean validateMethod(String type) {
        for (String method : accepted_methods) { //filter methods
            if (method.equals(type)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String pack() throws ParseException {
        String request = method + " " + path + " HTTP/1.0" + "\r\n";
        return request + super.pack();
    }

    @Override
    protected void parseArguments(String line) throws ParseException, NotImplementedException {
        Matcher req_match = REGEX_REQUEST.matcher(line);
        if (req_match.find()) {
            url = req_match.group(2);
            method = req_match.group(1);
            if (!validateMethod(method)) {
                throw new NotImplementedException("Invalid Method: " + method);
            }
            protocol = req_match.group(3);
        } else {
            throw new ParseException("Invalid HTTP Request " + line);
        }
        Matcher match = REGEX_HOST.matcher(url);
        if (match.find()) {
            String hst = match.group(2);
            if (hst != null) {
                host = hst.replaceAll(" ", "");
            }

            if (match.group(3) != null) {
                port = Integer.parseInt(match.group(3).substring(1));
            }
            if (match.group(4) == null) {
                if (match.group(5) == null) {
                    path = "/";

                } else {
                    path = match.group(5).replaceAll(" ", "");
                }
            } else {
                path = match.group(4).replaceAll(" ", "");
            }
        } else {
            throw new ParseException("Invalid URL: " + url);
        }
        validateMethod(method);
    }

    @Override
    protected Matcher parseHeader(String line) throws ParseException {
        Matcher match = super.parseHeader(line);
        String type = match.group(1).toLowerCase().trim();
        switch (type) {
            case "host":
                String temp = match.group(2);
                Matcher match_host = REGEX_HOST.matcher(temp);
                if (match_host.find()) {
                    host = match_host.group(2);
                    if (match_host.group(3) != null) {
                        port = Integer.parseInt(match_host.group(3));
                    }
                } else {
                    throw new ParseException("Malformed Host: " + temp);
                }
                break;
            case "proxy-connection":
                line = "Proxy-Connection: close";
                break;
            //  line = "Accept-Encoding: identity;q=1.0";
            case "accept-encoding":
                break;
            case "accept":
                line = "Accept: text/html";
                break;
            case "connection":
                line = "Connection: close";
                break;
            default:

                break;
        }

        headers.add(line);
        return match;
    }

}
