package proxy;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Represents a single instance of the proxy listening on the port
 *
 * @author Torie Jenkins u1038290
 */
public class Instance extends Thread {

    private ServerSocket listener;
    private final AtomicBoolean teamcymru = new AtomicBoolean(true);
    private final AtomicBoolean running = new AtomicBoolean(true);
    private final AtomicBoolean verbose = new AtomicBoolean(false);
    private final AtomicBoolean xverbose = new AtomicBoolean(false);
    private final AtomicInteger port = new AtomicInteger(2020);

    @Override
    public void run() {
        if(!running.get())return;
        ThreadPoolExecutor activeConnections;
        activeConnections = (ThreadPoolExecutor) Executors.newCachedThreadPool();
        System.out.println("Connecting to port : " + port.get() + ".....");
        while (running.get()) {
            try {
                if (listener == null) {
                    listener = new ServerSocket(port.get());
                }
                Socket client = listener.accept();
                activeConnections.execute(new Process(client, verbose.get(), xverbose.get(), teamcymru.get()));
                
            } catch (IOException ex) {
                if (!(ex instanceof SocketException)) { // we will ingore socket exceptions
                    System.err.println("Error binding server to socket\n"
                            + "(is another service running?)\nexiting...");
                }
                break;

            }
        }
    }

    /**
     * Allows us to kill the thread if we need to
     */
    @Override
    public void interrupt() {
        running.set(false);
        try {
            if (listener != null) {
                listener.close();
            }
        } catch (IOException ex) {
            // we are killing the thread anyways, so just ignore it
        }
        super.interrupt();
    }

    /**
     * Sets the parameters for the port ( config items )
     *
     * @param port
     * @param teamcymru
     * @param verbosity
     */
    public void setParameters(int port, boolean teamcymru, int verbosity) {
        this.port.set(port);
        this.teamcymru.set(teamcymru);
        setVerbosity(verbosity);
    }

    /**
     * Toggle malware scanning
     *
     * @param b
     */
    public void runMalwareScanning(boolean b) {
        this.teamcymru.set(b);
    }

    /**
     * Set port to listen to
     *
     * @param p
     */
    public void setPort(int p) {
        this.port.set(p);
    }

    /**
     * Set verbosity level of instance
     *
     * @param v
     */
    public void setVerbosity(int v) {
        switch (v) {
            case 0:
                verbose.set(false);
                xverbose.set(false);
                break;
            case 1:
                verbose.set(true);
                xverbose.set(false);
                break;
            case 2:
                verbose.set(true);
                xverbose.set(true);
                break;
            default:
                break;
        }
    }
}
