package proxy;

import java.util.Scanner;

/**
 *
 * @author Torie Jenkins u1038290
 */
public class HProxy {

    static Proxy server;

    /**
     * @param args usage: java proxy.HProxy {port} Main Entry Point for the program
     */
    public static void main(String[] args) {
        int port = -1; //default port for service
        String usage = "--usage: java proxy.Proxy [port] <- port must be an integer (1,65535)";
        try {
            if (args.length == 1) { //two arguments
                port = Integer.parseInt(args[0]);
                if (port > 65535 || port < 1) {
                    throw new NumberFormatException();
                }
            } else if (args.length != 0) {
                System.out.println(usage);
                return;
            }
        } catch (NumberFormatException ex) {
            System.out.println(usage);
            return;
        }
        if (port == -1) {
            port = 2020;
            System.err.println("Warning: invalid port specified, default port is "+port);
        }
        server = new Proxy();
        server.startOnPort(port);
        while (server.running()) {
            consoleLoop();
        }
    }

    /**
     * Simple little interface for the proxy server
     */
    public static void consoleLoop() {
        Scanner scan = new Scanner(System.in);
        String line;
        System.out.println("Enter 'q' to exit..");
        System.out.println("For more commands enter 'help'...");
        System.out.print("$");
        while (scan.hasNextLine()) {
            line = scan.nextLine();
            if (line.equals("q")) {
                server.shutdown();
                System.exit(0);
            } else if (line.startsWith("cymru")) {
                if (line.endsWith("on")) {
                    server.scanCymru.set(true);
                    System.out.println("cymru scanning enabled: " + server.scanCymru.get() + ":\r\n");

                } else if (line.endsWith("off")) {
                    server.scanCymru.set(false);
                    System.out.println("cymru scanning enabled: " + server.scanCymru.get() + ":\r\n");

                } else {
                    System.out.println(Sources.USAGE_CYMRU);
                }
            } else if (line.startsWith("verbose")) {
                int verbosity = 0;
                if (line.endsWith(" 0")) {
                    verbosity = 0;
                    server.verbose.set(false);
                    server.xverbose.set(false);
                    System.out.println("verbosity level " + verbosity);
                } else if (line.endsWith(" 1")) {
                    verbosity = 1;
                    server.verbose.set(true);
                    System.out.println("verbosity level " + verbosity);
                } else if (line.endsWith(" 2")) {
                    verbosity = 2;
                    server.verbose.set(true);
                    server.xverbose.set(true);
                    System.out.println("verbosity level " + verbosity);
                } else {
                    System.out.println(Sources.USAGE_VERBOSE);
                }
            } else if (line.trim().startsWith("add")) {
                String[] split = line.split(" ");
                if (split.length == 2) {
                    try {
                        server.startOnPort(Integer.parseInt(split[1]));
                        try {
                            Thread.sleep(1000);//shouldn't take long to try to connect to a local port
                        } catch (InterruptedException ex) {
                            System.err.println(ex.getMessage());
                        }
                    } catch (NumberFormatException ex) {
                        System.out.println(Sources.USAGE_ADD);
                    }
                } else {
                    System.out.println(Sources.USAGE_ADD);
                }
            } else if (line.trim().startsWith("remove")) {
                String[] split = line.split(" ");
                if (split.length == 2) {
                    try {
                        server.stop(Integer.parseInt(split[1]));
                        System.out.println("Port " + split[1] + " closed");
                    } catch (NumberFormatException ex) {
                        System.out.println(Sources.USAGE_REMOVE);
                    }
                } else {
                    System.out.println(Sources.USAGE_REMOVE);
                }
            } else if (line.trim().equals("help")) {
                System.out.println("Available Commands:\n"
                        + Sources.USAGE_QUIT + "\n"
                        + Sources.USAGE_ADD + "\n"
                        + Sources.USAGE_REMOVE + "\n"
                        + Sources.USAGE_VERBOSE + "\n"
                        + Sources.USAGE_CYMRU + "\n"
                );
            }
            server.updateSettings();
            System.out.print("$");

        }

    }

}
