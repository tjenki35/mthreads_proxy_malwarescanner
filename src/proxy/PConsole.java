package proxy;

import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Torie Jenkins
 */
public class PConsole {

    static Proxy server;

    //todo:
    //setup param changes to reflect on any given valid port specified
    //remove starting up on a default port (let user add the service to which ever port if specified, or just start up the console otherwise)
    
    /**
     * @param args usage: java proxy.HProxy {port} Main Entry Point for the
     * program
     */
    public static void main(String[] args) {
        int port = -1; //default port for service
        String usage = "--usage: java proxy.PConsole [port] <- port must be an integer (1,65535)";
        try {
            if (args.length == 1) { //two arguments
                port = Integer.parseInt(args[0]);
                if (port > 65535 || port < 1) {
                    throw new NumberFormatException();
                }
            } else if (args.length != 0) {
                System.out.println(usage);
                return;
            }
        } catch (NumberFormatException ex) {
            System.out.println(usage);
            return;
        }

        server = new Proxy();
        while (server.running()) {
            consoleLoop();
        }
    }

    /**
     * Simple little interface for the proxy server
     * //todo: touch up user interface here. 
     */
    public static void consoleLoop() {
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter 'q' to exit..");
        System.out.println("For more commands enter 'help'...");
        System.out.print("$");
        while (true) {

            String line = scan.nextLine();
            String[] tokens = line.split(" ");
            if(tokens.length <= 0){
                System.err.println("No line parsed");
                continue;
            }

            if (tokens[0].equals("q")) {
                System.out.println("Received shutdown command...");
                server.shutdown();
                System.out.println("bye! :)");
                System.exit(0);
            }
            boolean valid = true;
            switch(tokens[0]){
            case "cymru":
                if(tokens.length>1){
                    switch(tokens[1]){
                    case "on":
                        server.scanCymru.set(true);
                        break;
                    case "off":
                        server.scanCymru.set(false);
                        break;
                    default:
                        valid = false;
                        break;
                    }
                    System.out.println("cymru scanning enabled: " + server.scanCymru.get() + ":\r\n");
                }else{
                    System.out.println(Sources.USAGE_CYMRU);
                }
                break;
            case "verbose":
                int verbosity = 0;
                if(tokens.length > 1){
                    try {
                        verbosity = Integer.parseInt(tokens[1]);
                        if (verbosity <= 0) {
                            server.verbose.set(false);
                            server.xverbose.set(false);
                        } else if (verbosity == 1) {
                            server.verbose.set(true);
                            server.xverbose.set(false);
                        } else if (verbosity >= 2) { //maximum verbosity
                            server.verbose.set(true);
                            server.xverbose.set(true);
                        }
                    } catch (NumberFormatException ex) {
                        valid = false;
                        System.out.println("Tried to parse a non-integer");
                    }
                }else{
                    valid = false;
                }
                if (valid) {
                    System.out.println("verbosity level: " + verbosity);
                } else {
                    System.out.println(Sources.USAGE_VERBOSE);
                }
                break;
            case "add":
                int port = 0; //random free port
                if (tokens.length>1) {
                    try {
                        port = Integer.parseInt(tokens[1]);
                        String path = null;
                        //parse the path out
                        if(tokens.length > 3 && tokens[2].equals("-f")){
                            path = tokens[3];
                        }
                        server.startOnPort(port, path);
                        //return immediately
                    } catch (NumberFormatException ex) {
                        System.out.println("Tried to parse a non-integer");
                        valid = false;
                    }
                } else {
                    valid = false;
                }
                if (!valid) {
                    System.out.println(Sources.USAGE_ADD);
                }
                break;
            case "remove":
                port = 0;

                if (tokens.length > 1) {
                    try {
                        port = Integer.parseInt(tokens[1]);
                        server.stop(port);
                    } catch (NumberFormatException ex) {
                        valid = false;
                        System.out.println("Tried to parse a non-integer");
                    }
                } else {
                    valid = false;
                }
                if (!valid) {
                    System.out.println(Sources.USAGE_REMOVE);
                }
                break;

            case "help":
                System.out.println("Available Commands:\n"
                                   + Sources.USAGE_QUIT + "\n"
                                   + Sources.USAGE_ADD + "\n"
                                   + Sources.USAGE_REMOVE + "\n"
                                   + Sources.USAGE_VERBOSE + "\n"
                                   + Sources.USAGE_CYMRU + "\n"
                    );
                break;
            case "clear":
                for(int i=0; i < 50; i++) System.out.println(""); //easiest way to implement thsi
            default:
                //-
                //System.out.println("For help type 'help' and press Return");
                break; // not a recognized command.

            }
            server.updateSettings();
            System.out.print("$");
        }
    }
}
