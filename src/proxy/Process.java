package proxy;

import java.math.BigInteger;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * Represents a single thread interaction between the proxy and a client
 *
 * @author Torie Jenkins u1038290
 */
public class Process implements Runnable {

    private final Connection client;
    private boolean verbose = false;
    private final StringBuilder history = new StringBuilder();

    public Process(Socket stream, boolean v) {
        client = new Connection(stream);
        verbose = v;
    }

    @Override
    public void run() {
        try {
            log("\n----------------Conversation(" + client.host() + ")--------------------------\n");
            client.open();
            HttpRequest request;
            request = (HttpRequest) client.readMessage(client.REQUEST);
            int port = 80;
            if (request.port != -1) {
                port = request.port;
            }
            if (port == 443) {
                throw new NotImplementedException("HTTPS not supported");
            }

            Connection connection;
            connection = new Connection(InetAddress.getByName(request.host.replaceAll(" ", "")).getHostAddress(), port);

            log("\n***Routing request from " + client.host() + " to " + connection.host() + "***\n");
            log(request.pack());

            connection.open();
            connection.send(request);
            connection.flush();

            HttpResponse response = (HttpResponse) connection.readMessage(connection.RESPONSE);

            if (response.buffer != null) {
                MessageDigest digest;
                //we can intercept the malware here:
                digest = MessageDigest.getInstance("MD5");
                byte[] hash = digest.digest(response.buffer);
                BigInteger bin = new BigInteger(1, hash);
                //http://stackoverflow.com/questions/332079/in-java-how-do-i-convert-a-byte-array-to-a-string-of-hex-digits-while-keeping-l
                log("\n***Hashing of server's object: " + String.format("(%0" + (hash.length << 1) + "X", bin).toLowerCase() + ")***\n");

            } else {
                log("\n***No Object to Hash***\n");
            }

            client.send(response);
            client.flush();

            log("\n***Routing reply from " + connection.host() + " to " + client.host() + "***\n");
            log(response.pack());
            log("----------------------------------");
            connection.close();

        } catch (ParseException ex) {
            String msg = "Process Crashed, Source -> " + ex.getMessage() + ", client : " + client.host();
            log(msg);
            if (!verbose) {
                System.err.println(msg);
            }
            HttpResponse response = new HttpResponse();
            response.reasonPhrase = "Bad Request";
            response.status = 400;
            response.protocol = "HTTP/1.0";
            try {
                log(response.pack() + "\n");
                response.buffer = "<html>BAD REQUEST, hmm.........<//html>".getBytes();
                client.send(response);
            } catch (ParseException | NetworkException ex1) {
                log(ex.getMessage());
            }
        } catch (NetworkException ex) {
            String msg = "Network Error, Source -> " + ex.getMessage() + ", client : " + client.host();
            if (!verbose) {
                System.err.println(msg);
            } else {
                log(msg);
            }
        } catch (UnknownHostException ex) {
            String msg = "Unknown Host given in request :" + ex.getMessage();
            if (!verbose) {
                System.err.println(msg);
            } else {
                log(msg);
            }
        } catch (NotImplementedException ex) {
            HttpResponse response = new HttpResponse();
            response.reasonPhrase = "Not Implemented";
            response.status = 501;
            response.protocol = "HTTP/1.0";
            try {
                log(ex.getMessage() + response.pack() + '\n');
                client.send(response);
            } catch (ParseException | NetworkException ex1) {
                log(ex1.getMessage());
            }
            log("\nMethod Not Implemented\n");

        } catch (NoSuchAlgorithmException ex) {
            String msg = ex.getMessage() + "\nIssue w/ hashing algorithm\n";
            if (!verbose) {
                System.err.println(msg);
            } else {
                log(msg);
            }
        } finally {
            print(history.toString());
            try {
                client.flush();
                client.close();
            } catch (NetworkException ex) {
                System.err.println("Network Error, Source -> " + ex.getMessage());
            }
        }

    }

    private void print(String message) {
        if (verbose) {
            System.out.println(message);
        }
    }

    private void log(String message) {
        if (verbose) {
            history.append(message);
        }
    }
}
