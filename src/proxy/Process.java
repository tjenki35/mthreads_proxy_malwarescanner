package proxy;

import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

/**
 * Represents a single thread interaction between the proxy and a client
 *
 * @author Torie Jenkins u1038290
 */
public class Process implements Runnable {

    private final Connection client;
    private final boolean verbose;
    private final boolean scanCymru;
    private final boolean xverbose;
    private final StringBuilder history = new StringBuilder();

    public Process(Socket stream, boolean v, boolean xv, boolean cymru) {
        client = new Connection(stream);
        verbose = v;
        xverbose = xv;
        scanCymru = cymru;
    }

    @Override
    public void run() {
        try {
            log("\n----------------Conversation(" + client.host() + ")--------------------------\n");
            HttpRequest request;
            try {
                client.open();
                request = (HttpRequest) client.readMessage(client.REQUEST);
            } catch (IOException ex) {
                throw new NetworkException("Was unable to send response back to client, client closed?", 499, "Client Closed Request");
            }

            if (client.host() == null) {
                //if there is no host, no point in continuing
                return;
            }

            int port = 80;
            if (request.port != -1) {
                port = request.port;
            }
            if (port == 443) {
                history.setLength(0);

                throw new NotImplementedException("HTTPS not supported", 501, "Not Implemented", "");
            }
            Connection connection;
            try {

                InetAddress inet = InetAddress.getByName(request.host);
                String address = inet.getHostAddress(); // todo find source
                connection = new Connection(address, port);
            } catch (NullPointerException ex) {
                throw ex;
            }

            log("***Routing request from " + client.host() + " to " + connection.host() + "***\n");
            if (xverbose) {
                log(request.pack());
            }

            try {
                connection.open();
                connection.send(request);
                connection.flush();
            } catch (IOException ex) {
                throw new NetworkException("There was an error contacting the requested server", 409, "Conflict"); // no server response
            }
            HttpResponse response;
            try {
                response = (HttpResponse) connection.readMessage(connection.RESPONSE);
                connection.close();
            } catch (IOException ex) {
                throw new NetworkException("Recieved an invalid response from target resource", 502, "Bad Gateway");
            }
            if (scanCymru) {
                try {
                    if (response.buffer != null) {
                        StringBuilder output = new StringBuilder();
                        byte[] hash;
                        try {
                            hash = MessageDigest.getInstance("SHA1").digest(response.buffer);
                            for (byte b : hash) {
                                String hex = Integer.toHexString(0xFF & b); // convert to hex ( I wonder if I can just send straight bytes to the service
                                if (hex.length() == 1) {
                                    output.append('0');
                                }
                                output.append(hex);
                            }
                        } catch (NoSuchAlgorithmException ex) {
                            printErr(ex.getLocalizedMessage());
                        }
                        Connection cymru = new Connection("hash.cymru.com", 43);
                        cymru.open();
                        cymru.sendRaw(output.toString() + "\n");
                        cymru.flush();
                        String answer = cymru.readline();
                        if (!answer.contains("NO_DATA")) { //stronger tests w/ the percentage, but this is basic
                            //something is seriously wrong now :p
                            Arrays.fill(response.buffer, (byte) 0); //all your bits are off:)
                            response.buffer = null; // I mean cmon
                            //let's inform the user
                            response.buffer = "<html><body> RAWR - you have come across something bad, don't do that!</body></html>".getBytes();
                        } // else continue to deliver content
                        cymru.close(); //thanks guys!
                        log("Cymru says: " + answer + "\n");
                    } else {
                        log("\n***No Object to Hash***\n");
                    }
                } catch (IOException ex) {
                    printErr("TEAM CYMRU RESOURCE NOT AVAILABLE: proceed with caution");
                }
            }
            try {
                client.send(response);
                client.flush();

            } catch (IOException ex) {
                log("Was unable to send response back to client, client closed?");
            }
            log("***Routing reply from " + connection.host() + " to " + client.host() + "***\n");
            if (xverbose) {
                log(response.pack());
            }
            log("-------------------------------------------------------------------\n\n");

        } catch (HttpException ex) {
            String tcp = "Tcp session closed from client side";
            log(ex.getMessage());
            printErr(tcp);
            if (client.isAlive()) {
                try {
                    client.send(ex.pack());
                } catch (IOException netex) {
                    if (xverbose) {
                        printErr(tcp);
                    }
                } catch (ParseException parsex) {
                    printErr("Program Erorr : Call Me");
                }
            } else {
                printErr(tcp);
            }
        } catch (UnknownHostException ex) { // for more detailed exception handling it could be sufficient to handle each network exception independently from source and
            printErr(ex.getMessage());
        } finally {
            if (history.length() > 0) {
                print(history.toString());
            }
            try {
                client.flush();
                client.close();
            } catch (IOException ex) {
                printErr(ex.getMessage());
            }
        }
    }

    private void print(String message) {
        if (verbose) {
            System.out.println(message);
        }
    }

    private void printErr(String message) {
        if (xverbose) {
            System.err.println(message);
        }
    }

    private void log(String message) {
        if (verbose) {
            history.append(message);
        }
    }
}
