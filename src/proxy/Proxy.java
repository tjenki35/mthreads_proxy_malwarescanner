package proxy;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 *
 * @author Torie Jenkins u1038290
 */
public class Proxy {

    static Proxy server;

    /**
     * @param args the command line arguments 0 - program name, 1 - port
     *
     */
    public static void main(String[] args) {
        int port = -1; //default port for service
        try {
            if (args.length > 1) { //two arguments
                port = Integer.parseInt(args[2]);
                if (port > 65535 || port < 1) {
                    throw new NumberFormatException();
                }
            }
        } catch (NumberFormatException ex) {
            System.out.println("--usage: java proxy.Proxy [port] <- port must be an integer (1,65535)");
            return;
        }
        if (port == -1) {
            System.err.println("Warning: invalid port specified, default port is '5000'");
            port = 5000;
        }
        server = new Proxy(port);
        server.start();
        while (server.running()) {
            consoleLoop();
        }
    }

    //static configurations from the console loop should be thread-safe
    private static final AtomicBoolean VERBOSE = new AtomicBoolean(false);

    public static void consoleLoop() {
        Scanner scan = new Scanner(System.in);
        String line;
        System.out.println("Enter 'q' to exit..");
        System.out.println("For more commands enter 'help'...");
        System.out.print("$");
        while (scan.hasNextLine()) {
            line = scan.nextLine();
            if (line.equals("q")) {
                server.stop();
                System.exit(0);
            } else if (line.startsWith("verbose")) {
                if (line.endsWith("on")) {
                    VERBOSE.set(true);
                } else if (line.endsWith("off")) {
                    VERBOSE.set(false);
                } else {
                    System.out.println("usage: verbose [on|off] -- turns on packet view");
                }
            } else if (line.trim().equals("help")) {
                System.out.println("\n***Available Commands***\n verbose [on|off](show packets)\n q(quit)\n");
            }
            System.out.print("$");
        }
    }

    private final int port;
    private Thread time;
    private final AtomicBoolean alive = new AtomicBoolean(false);
    private ThreadPoolExecutor pool;

    public void proxyLoop() {
        pool = (ThreadPoolExecutor) Executors.newCachedThreadPool();
        System.out.println("Server listening on port : " + port);
        while (alive.get()) {
            try (ServerSocket listener = new ServerSocket(port)) {
                Socket client = listener.accept(); //could pack configuration into an object dependent on the console input
                pool.execute(new Thread(new Process(client, VERBOSE.get())));// this is a custom process, not one from java.lang
            } catch (IOException ex) {
                System.err.println("Error binding server to socket\n"
                        + "(is another server running?)\nexiting...");
                System.exit(0);
            }
        }
    }

    Proxy(int port) {
        this.port = port;
    }

    public void start() { //start the server in a new thread
        if (!alive.get()) {
            time = new Thread(() -> {
                proxyLoop();
            });
            alive.set(true);
            time.start();
        }
    }

    public void stop() {
        if (alive.get()) {
            try {
                time.interrupt();
                alive.set(false);
            } catch (SecurityException sec) {
                System.err.println(sec.getMessage());
            }
            time = null;
        }
    }

    public boolean running() {
        return alive.get();
    }

}
