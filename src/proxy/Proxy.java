package proxy;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.HashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 *
 * @author Torie Jenkins u1038290
 */
public class Proxy {

    private final ThreadPoolExecutor activePorts;
    private final HashMap<Integer, Instance> portTable = new HashMap<>();
    public final AtomicBoolean verbose = new AtomicBoolean(false);
    public final AtomicBoolean xverbose = new AtomicBoolean(false);
    public final AtomicBoolean scanCymru = new AtomicBoolean(true);
    private final AtomicBoolean alive = new AtomicBoolean(false);

    Proxy() {
        activePorts = (ThreadPoolExecutor) Executors.newCachedThreadPool();
    }

    /**
     * Start an instance on the specified port
     *
     * @param port
     */
    public void startOnPort(final int port) { //start the server in a new thread
        if (!alive.get()) {
            alive.set(true);
        }
        if (!portTable.containsKey(port)) {
            Instance instance = new Instance();
            instance.setParameters(port, scanCymru.get(), ((verbose.get()) ? 1 : 0) + ((xverbose.get()) ? 1 : 0));
            portTable.put(port, instance);
            activePorts.submit(instance);
        } else {
            System.out.println("Port already being monitored!");
        }
    }

    /**
     * Update all running instances
     */
    public void updateSettings() {
        portTable.forEach((i, instance) -> {
            instance.setVerbosity(((verbose.get()) ? 1 : 0) + ((xverbose.get()) ? 1 : 0));
            instance.runMalwareScanning(scanCymru.get());
        });
    }

    /**
     * Stop instance listening on the specified port
     *
     * @param port
     */
    public void stop(int port) {
        if (alive.get()) {
            if (portTable.containsKey(port)) {
                portTable.get(port).interrupt();
                portTable.remove(port);
            }
            if (portTable.size() < 1) {
                alive.set(false);
            }
        }
    }

    /**
     * Attempts to shutdown all instances listening on all ports
     */
    public void shutdown() {
        portTable.values().forEach((thread) -> thread.interrupt());
    }

    /**
     * Returns the status of the proxy server
     *
     * @return
     */
    public boolean running() {
        return alive.get();
    }

}
