package proxy;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.HashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 *
 * @author Torie Jenkins u1038290
 */
public class Proxy {

    private final ThreadPoolExecutor activePorts;
    private final HashMap<Integer, Thread> portTable = new HashMap<>();
    public final AtomicBoolean verbose = new AtomicBoolean(false);
    public final AtomicBoolean xverbose = new AtomicBoolean(false);
    public final AtomicBoolean scanCymru = new AtomicBoolean(true);
    private final AtomicBoolean alive = new AtomicBoolean(false);

    Proxy() {
        activePorts = (ThreadPoolExecutor) Executors.newCachedThreadPool();
    }

    public void startOnPort(final int port) { //start the server in a new thread
        if (!alive.get()) {
            alive.set(true);
        }
        if (!portTable.containsKey(port)) {
            Thread t = new Thread() {
                private ServerSocket listener;
                private final AtomicBoolean running = new AtomicBoolean(true);

                @Override
                public void run() {
                    ThreadPoolExecutor activeConnections;
                    activeConnections = (ThreadPoolExecutor) Executors.newCachedThreadPool();
                    System.out.println("Connecting to port : " + port + ".....");
                    while (running.get()) {
                        try {
                            if(listener==null)listener = new ServerSocket(port);
                            Socket client = listener.accept();
                            activeConnections.execute(new Process(client, verbose.get(), xverbose.get(), scanCymru.get()));
                        } catch (IOException ex) {
                            if (!(ex instanceof SocketException)) { // we will ingore socket exceptions
                                System.err.println("Error binding server to socket\n"
                                        + "(is another service running?)\nexiting...");
                            }
                            break;
                            
                        }
                    }
                }

                @Override
                public void interrupt() {
                    running.set(false);
                    try {
                        if (listener != null) {
                            listener.close();
                        }
                    } catch (IOException ex) {
                        // we are killing the thread anyways, so just ignore it
                    }
                    super.interrupt();
                }
            };
            portTable.put(port, t);
            activePorts.submit(t);
        } else {
            System.out.println("Port already being monitored!");
        }
    }

    public void stop(int port) {
        if (alive.get()) {
            if (portTable.containsKey(port)) {
                portTable.get(port).interrupt();
                portTable.remove(port);
            }
            if (portTable.size() < 1) {
                alive.set(false);
            }
        }
    }

    public void shutdown() {
        portTable.values().forEach((thread) -> thread.interrupt());
    }

    public boolean running() {
        return alive.get();
    }

}
