package proxy;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

/**
 * Represents a single throw away tcp connection bewteen a client and a host
 *
 * @author Torie Jenkins u1038290
 */
public class Connection {

    private Socket connection;
    private InputStream in;
    private OutputStream out;
    private final String destination;
    private final int port;

    public Connection(String destination, int port) {
        this.destination = destination;
        this.port = port;
    }

    public Connection(Socket existing_socket) {
        connection = existing_socket;
        port = connection.getPort();
        destination = connection.getInetAddress().getHostName();
    }

    public boolean isAlive() {
        return (connection.isConnected() && !connection.isClosed());
    }

    public void readData(Message msg) throws IOException {
        boolean checkcontent = msg.contentType != null;
        if (checkcontent) {
            int by;
            try (ByteArrayOutputStream stream = new ByteArrayOutputStream()) {
                while ((by = in.read()) != -1) {
                    stream.write(by);
                }
                stream.flush();
                msg.buffer = stream.toByteArray();
                stream.close();
            }
        }
    }

    public String readline() throws IOException {
        StringBuilder build = new StringBuilder();
        int b;
        char last = '0';
        char current;
        while (((b = in.read()) != -1)) {
            current = (char) (b & 0xFF);
            if (current == '\n') {
                if (last == '\r') {
                    break;
                }
            } else if (current != '\r') {
                build.append(current);

            }
            last = current;

        }
        return build.toString();
    }

    public final int RESPONSE = -1;
    public final int REQUEST = -2;

    public Message readMessage(int type) throws ParseException, NotImplementedException, IOException {
        Message parse;
        switch (type) {
            case RESPONSE:
                parse = new HttpResponse();
                break;
            case REQUEST:
                parse = new HttpRequest();
                break;
            default:
                throw new NotImplementedException("Not Implemented", 501, "Not Implemented", "");
        }
        while (!parse.done()) {
            parse.nextLine(readline());
        }

        readData(parse);
        return parse;
    }

    public void flush() throws IOException {
        out.flush();
    }

    public boolean send(Message msg) throws IOException, ParseException {
        out.write(msg.pack().getBytes());
        if (msg.buffer != null) {
            out.write(msg.buffer);
        }
        return true;
    }

    public void sendRaw(String output) throws IOException {
        out.write(output.getBytes());
    }

    public void open() throws IOException {
        if (connection == null) {
            connection = new Socket(destination, port);
        }
        if (out == null) {
            out = connection.getOutputStream();
        }
        if (in == null) {
            in = connection.getInputStream();
        }
    }

    public String host() {
        return destination;
    }

    public void close() throws IOException {
        if (connection.isConnected() && !connection.isClosed()) {
            out.close();
            in.close();
            connection.close();
        }
    }

}
