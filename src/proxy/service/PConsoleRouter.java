package proxy.service;

import java.util.Arrays;

/**
 *
 * @author tjenkins
 */
public class PConsoleRouter {

    public static void route(String input, Proxy server) {

        // parse space delimited tokens
        String[] tokens = input.split(" ");

        // test the actual length (with the given command)
        int trueLength = tokens.length - 1;
        if (trueLength < 0 || trueLength % 2 != 0) {
            System.out.println("Invalid command seqence given: " + input);
            System.out.println("Format: base_command key1 value1 ... keyN valueN");
        }

        String baseCommand = tokens[0];
        Options options = new Options(Arrays.copyOfRange(tokens, 1, tokens.length), "");

        // TODO: move set, add, remove to ActionsRouter class (since they are actions that could be used outside of the PConsole) 
        if (baseCommand.equals("set")) {
            if (options.hasConfig("verbose")) {
                try {
                    int verbosity = Integer.parseInt(options.getConfig("verbose"));
                    if (verbosity <= 0) {
                        server.verbose.set(false);
                        server.xverbose.set(false);
                    } else if (verbosity == 1) {
                        server.verbose.set(true);
                        server.xverbose.set(false);
                    } else if (verbosity >= 2) { //maximum verbosity
                        server.verbose.set(true);
                        server.xverbose.set(true);
                    }
                } catch (NumberFormatException ex) {
                    System.out.println("Must provide a number for option verbose");
                }
            }
            if (options.hasConfig("cymru")) {
                try {
                    server.scanCymru.set(Integer.parseInt(options.getConfig("cymru")) == 1);
                    System.out.println("cymru scanning enabled: " + server.scanCymru.get() + ":\r\n");
                } catch (NumberFormatException ex) {
                    System.out.println("Must provide a number for option verbose");
                }
            }

        } else if (baseCommand.equals("remove")) {

            if (options.hasConfig("port")) {
                try {
                    int port = Integer.parseInt(options.getConfig("port"));

                    // TODO: static variable
                    if (port > 65535) {
                        throw new NumberFormatException("Port must be within 0 and 65535");
                    }

                    server.stop(port);

                } catch (NumberFormatException ex) {
                    System.err.println(Sources.USAGE_REMOVE);
                    System.err.println("Invalid port number given: " + ex.getMessage());
                }
            } else {
                System.err.println("port is a required arg for remove");
            }
        } else if (baseCommand.equals("add")) {
            if (options.hasConfig("port")) {
                try {
                    int port = Integer.parseInt(options.getConfig("port"));

                    // TODO: static variable
                    if (port > 65535) {
                        throw new NumberFormatException("Port must be within 0 and 65535");
                    }

                    // setup logfile path
                    String path = options.hasConfig("log") ? options.getConfig("log") : null;
                    server.startOnPort(port, path);

                } catch (NumberFormatException ex) {
                    System.err.println(Sources.USAGE_ADD);
                    System.err.println("Invalid port number given: " + ex.getMessage());
                }
            } else {
                System.err.println("port is a required arg for add");
            }

        } else {

            //remaining commands can stay in this file
            switch (baseCommand) {
                case "q":
                    System.out.println("Received shutdown command...");
                    server.shutdown();
                    // TODO: figure out why shutdown stalls
                    System.exit(0);
                case "status":
                    server.getPortStatus();
                    break;
                case "help":
                    System.out.println("Available Commands:\n"
                            + Sources.USAGE_QUIT + "\n"
                            + Sources.USAGE_ADD + "\n"
                            + Sources.USAGE_REMOVE + "\n"
                            + Sources.USAGE_STATUS + "\n"
                    );
                    break;
                case "clear":
                    for (int i = 0; i < 50; i++) {
                        System.out.println(""); //easiest way to implement thsi
                    }
                    break;
                default:
                    System.out.println("For help type 'help' and press Return");
                    break; // not a recognized command.
            }
        }
    }
}
